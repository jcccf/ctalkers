http://www.w3.org/TR/rdf-sparql-query/

General
=======
Select all triples.

    SELECT * WHERE {?X ?Y ?Z.}
    
    
Prefixes
=========
PREFIX rdfs: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX ct: <http://www.semanticweb.org/ontologies/2011/4/ctalkology.owl#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX xs: <http://www.w3.org/2001/XMLSchema#>

Questions
=========
Who follows Lady Gaga? (OKAY)

    SELECT ?username
    WHERE {
      ?user
        foaf:name ?username;
        ct:follows ?celebrity.
      ?celebrity
        rdfs:type ct:Celebrity;
        foaf:name "Lady Gaga" ^^ xs:string.
    }
    
Who follows who? (OKAY, demonstrates reasoner is working)
    
    SELECT ?username ?celebname
    WHERE {
      ?user
        foaf:name ?username.
      ?celebrity
        foaf:name ?celebname;
        ct:followedBy ?user.
    }

Who mentions who? (OKAY, demonstrates reasoner is working)

    SELECT ?username ?celebname
    WHERE {
      ?user
        foaf:name ?username.
      ?celebrity
        foaf:name ?celebname;
        ct:mentionedBy ?user.
    }
    
Who mentions Lady Gaga? (OKAY)
    
    SELECT ?username
    WHERE {
      ?user
        foaf:name ?username.
      ?celebrity
        foaf:name "Lady Gaga" ^^ xs:string;
        ct:mentionedBy ?user.
    }

Which celebrities use which Twitter clients? (OKAY)

    SELECT ?celebrityname ?clientname
    WHERE {
      ?celebrity 
        foaf:name ?celebrityname;
        rdfs:type ct:Celebrity;
        ct:hasTwitterClient ?client.
      ?client
        foaf:name ?clientname.
    }

Who follows/mentions a celebrity and lives in the same place as the celebrity? (OKAY)

    SELECT ?username
    WHERE {
      {?user
        foaf:name ?username;
        ct:follows ?celebrity;
        ct:hasLocation ?location.
      ?celebrity
        foaf:name "Lady Gaga" ^^ xs:string;
        ct:hasLocation ?location.} UNION
      {?user
        foaf:name ?username;
        ct:mentioned ?celebrity;
        ct:hasLocation ?location.
      ?celebrity
        foaf:name "Lady Gaga" ^^ xs:string;
        ct:hasLocation ?location.}
    }
    
What are all the locations in the database? (OKAY)

    SELECT ?location ?city ?country ?lat ?lon
    WHERE {
      OPTIONAL { ?location ct:city ?city. }
      OPTIONAL { ?location ct:country ?country. }
      OPTIONAL { ?location ct:latitude ?lat. }
      OPTIONAL { ?location ct:longitude ?lon. }
    }

List me all events of all celebrities.

    SELECT ?celebname ?eventname
    WHERE {
      ?celeb
        ct:hasEvent ?event;
        foaf:name ?celebname.
      ?event foaf:name ?eventname.
    }

List me events of Lady Gaga.

    SELECT ?eventname
    WHERE {
      ?celeb
        ct:hasEvent ?event;
        foaf:name "Lady Gaga" ^^ xs:string.
      ?event foaf:name ?eventname.
    }

List me all Twitter clients.

    SELECT DISTINCT ?twitterclient ?clientname
    WHERE {
      ?person ct:hasTwitterClient ?twitterclient.
      ?twitterclient foaf:name ?clientname.
    }

List me all users and their Twitter clients.

    SELECT ?name ?clientname
    WHERE {
      ?person 
        ct:hasTwitterClient ?twitterclient; 
        foaf:name ?name.
      ?twitterclient foaf:name ?clientname.
    }

Who lives in locations that are cities with populations greater than 5? (OKAY)

    SELECT ?username ?location ?city
    WHERE {
      ?user
        foaf:name ?username;
        ct:hasLocation ?location.
      ?location 
        ct:city ?city;
        ct:population ?pop.
        FILTER (?pop > 5)
    }

Who lives in some range of lat/long coordinates? (OKAY)

    SELECT ?name
    WHERE {
      ?user
        foaf:name ?name;
        ct:hasLocation ?location.
      ?location
        ct:latitude ?lat;
        ct:longitude ?lon.
        FILTER (?lat < 45.0)
        FILTER (?lat > 40.0)
        FILTER (?lon < -70.0)
        FILTER (?lon > -80.0)
    }

Return user and event pairs where 
  an event is by a celebrity the user mentions or follows 
    and is in the same location as the user.
    
    SELECT ?username ?celebrityname ?eventname
    WHERE {
      {?user
        foaf:name ?username;
        ct:follows ?celebrity;
        ct:hasLocation ?location.
      ?celebrity
        foaf:name ?celebrityname;
        ct:hasEvent ?event.
      ?event
        foaf:name ?eventname;
        ct:hasLocation ?location.} UNION
      {?user
        foaf:name ?username;
        ct:mentioned ?celebrity;
        ct:hasLocation ?location.
      ?celebrity
        foaf:name ?celebrityname;
        ct:hasEvent ?event.
      ?event
        foaf:name ?eventname;
        ct:hasLocation ?location.}  
    }

Return a list of users who mentioned a celebrity and use the same Twitter Client as the celebrity.

    SELECT ?username ?celebrityname
    WHERE {
      ?user
        foaf:name ?username;
        ct:mentioned ?celebrity;
        ct:hasTwitterClient ?client.
      ?celebrity
        foaf:name ?celebrityname;
        ct:hasTwitterClient ?client.
    }


============================
============================


To Restrict to Some Lat/Long
============================
3.2 Restricting Numerical Values

PREFIX  dc:  <http://purl.org/dc/elements/1.1/>
PREFIX  ns:  <http://example.org/ns#>
SELECT  ?title ?price
WHERE   { ?x ns:price ?price .
          FILTER (?price < 30.5)
          ?x dc:title ?title . }
          
          
Random Queries
==============
You can run these on the DBPedia SPARQL Endpoint at http://dbpedia.org/sparql

Find films which have a budget of exactly 1.9 billion yen.
----------------------------------------------------------
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>        
    PREFIX prop: <http://dbpedia.org/property/>
    PREFIX onto: <http://dbpedia.org/ontology/>
    PREFIX reso: <http://dbpedia.org/resource/>

SELECT ?name
WHERE {
?film prop:name ?name;
onto:budget "1.9E9"^^<http://dbpedia.org/datatype/japaneseYen>.
}


Find places which have land area > 100 km2 and < 10000 km2
----------------------------------------------------------
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>        
    PREFIX prop: <http://dbpedia.org/property/>
    PREFIX onto: <http://dbpedia.org/ontology/>
    PREFIX reso: <http://dbpedia.org/resource/>

SELECT ?name, ?capital, ?area
WHERE {
?country foaf:name ?name;
prop:capital ?capital;
prop:areaKm ?area.
FILTER(?area < 1000)
FILTER(?area > 100)
}